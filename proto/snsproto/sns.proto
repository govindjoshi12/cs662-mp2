// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
package SNS;
import "google/protobuf/timestamp.proto";

// The messenger service definition.
service SNSService {

	rpc Login (Request) returns (Reply) {}
	rpc List (Request) returns (ListReply) {}
	rpc Follow (Request) returns (Reply) {}
	rpc UnFollow (Request) returns (Reply) {}

	// For cross-server communication
	rpc GetLog (SiblingRequest) returns (LogReply) {}
	rpc AddPost (Request) returns (Reply) {}

	// Bidirectional streaming RPC
	rpc Timeline (stream Message) returns (stream Message) {} 
}

// Want to rename (not important)
enum SNSStatus {
	SUCCESS = 0;
	FAILURE_ALREADY_EXISTS = 1;
	FAILURE_NOT_EXISTS = 2;
	FAILURE_INVALID_USERNAME = 3;
	FAILURE_NOT_A_FOLLOWER = 4;
	FAILURE_INVALID = 5;
	FAILURE_UNKNOWN = 6;
}

message ListReply {
	repeated string all_users = 1;
	repeated string followers = 2;
	repeated string following = 3;
	SNSStatus status = 4;
}

message Request {
	string username = 1;
	repeated string arguments = 2;
	google.protobuf.Timestamp timestamp = 3;
	Message message = 4;
	bool from_server = 5;
}

message Reply {
	string msg = 1;
	SNSStatus status = 2;
}

message Message {
	string username = 1; // Username who sent the message
	string msg = 2; // Message content
	google.protobuf.Timestamp timestamp = 3; // Timestamp 
}

// For cross-server communication
message SiblingRequest {
	// Empty
}

message LogReply {

	// Used for communicating the entire log of
	// user info and posts processed by a server

	string userinfo = 1;
	string posts = 2;
}