syntax = "proto3";
package SNS;

// --------- ---------------------------------------------------
// The coordinator service definition
// These are the different functionalities exposed by service
// ------------------------------------------------------------

//Init and Heartbeat potentially redundant
service CoordService{
  // Client API
  rpc GetUniqueClientID (ClientRequest) returns (ID) {}
  rpc GetServer (ID) returns (ServerInfo) {}

  // Server API
  rpc Heartbeat (ServerInfo) returns (Path) {}
  rpc RegisterServer(ServerInfo) returns (Path) {}
  rpc GetCounterparts (ServerInfo) returns (ServerList) {}
  rpc GetOtherClusterMasters (ServerInfo) returns (ServerList) {}
}

message ClientRequest {
  // Empty
}

//confirmation message definition
message Confirmation {
  bool status = 1;
}

//id message definition
message ID {
  int32 id = 1;
}

message FileInfo {
  string path = 1;
  string data = 2;
}

message FileData {
  string data = 1;
}

message Path {
  string path = 1;
  bool master = 2;
  string sync_address = 3; // empty master address indicates master status
}

//server info message definition
message ServerInfo {
  int32 serverid = 1;
  int32 clusterid = 2;
  string hostname = 3;
  string port = 4;
  string type = 5;
  bool registered = 6;
  bool changed = 7;
}

message ServerList{
  repeated ServerInfo servers = 1;
}
